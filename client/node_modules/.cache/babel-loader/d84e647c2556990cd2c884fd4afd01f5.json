{"ast":null,"code":"import { takeLatest, call, put, all } from \"redux-saga/effects\";\nimport { FETCH_COLLECTIONS_START } from \"./shop.types\";\nimport { firestore, convertCollectionSnapshotToMap } from \"../../firebase/firebase.utils\";\nimport { fetchCollectionSuccess, fetchCollectionFailure } from \"./shop.actions\";\nexport function* fetchCollectionAsync() {\n  try {\n    const collectionRef = firestore.collection(\"collections\");\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionSnapshotToMap, snapshot);\n    yield put(fetchCollectionSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionFailure(error));\n  }\n}\nexport function* fetchCollectionStart() {\n  yield takeLatest(FETCH_COLLECTIONS_START, fetchCollectionAsync);\n}\nexport function* shopSagas() {\n  yield all([call(fetchCollectionStart)]);\n}","map":{"version":3,"sources":["/home/bee/Coding/coding/React/e-commerce/src/redux/shop/shop.sagas.js"],"names":["takeLatest","call","put","all","FETCH_COLLECTIONS_START","firestore","convertCollectionSnapshotToMap","fetchCollectionSuccess","fetchCollectionFailure","fetchCollectionAsync","collectionRef","collection","snapshot","get","collectionsMap","error","fetchCollectionStart","shopSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,SAASC,uBAAT,QAAwC,cAAxC;AACA,SACEC,SADF,EAEEC,8BAFF,QAGO,+BAHP;AAIA,SAASC,sBAAT,EAAiCC,sBAAjC,QAA+D,gBAA/D;AAEA,OAAO,UAAUC,oBAAV,GAAiC;AACtC,MAAI;AACF,UAAMC,aAAa,GAAGL,SAAS,CAACM,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMb,IAAI,CAACK,8BAAD,EAAiCM,QAAjC,CAAjC;AACA,UAAMV,GAAG,CAACK,sBAAsB,CAACO,cAAD,CAAvB,CAAT;AACD,GALD,CAKE,OAAOC,KAAP,EAAc;AACd,UAAMb,GAAG,CAACM,sBAAsB,CAACO,KAAD,CAAvB,CAAT;AACD;AACF;AAED,OAAO,UAAUC,oBAAV,GAAiC;AACtC,QAAMhB,UAAU,CAACI,uBAAD,EAA0BK,oBAA1B,CAAhB;AACD;AAED,OAAO,UAAUQ,SAAV,GAAsB;AAC3B,QAAMd,GAAG,CAAC,CAACF,IAAI,CAACe,oBAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { takeLatest, call, put, all } from \"redux-saga/effects\";\nimport { FETCH_COLLECTIONS_START } from \"./shop.types\";\nimport {\n  firestore,\n  convertCollectionSnapshotToMap\n} from \"../../firebase/firebase.utils\";\nimport { fetchCollectionSuccess, fetchCollectionFailure } from \"./shop.actions\";\n\nexport function* fetchCollectionAsync() {\n  try {\n    const collectionRef = firestore.collection(\"collections\");\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionSnapshotToMap, snapshot);\n    yield put(fetchCollectionSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionFailure(error));\n  }\n}\n\nexport function* fetchCollectionStart() {\n  yield takeLatest(FETCH_COLLECTIONS_START, fetchCollectionAsync);\n}\n\nexport function* shopSagas() {\n  yield all([call(fetchCollectionStart)]);\n}\n"]},"metadata":{},"sourceType":"module"}